<meta charset="utf-8">

<% if !self.current_user.nil? %>
    <h1>Welcome <%= self.current_user.username %></h1>
<% else %>
    <h1>Welcome</h1>
<% end %>

<div class="info">
    <p>Twilight is a Twitter ranking site. It ranks users on influence based on certain key factors using publicly available information. In order to see how you rank in your social network, first make an account. Once you've registered, you'll see your ranking on the table below compared to other Twilight users.</p>
</div>

<div id="network">
<%= javascript_include_tag 'd3.min', :charset=>"utf-8" %>
<%= javascript_include_tag 'd3.geom', :charset=>"utf-8" %>
<%= javascript_include_tag 'd3.layout', :charset=>"utf-8" %>

<%= javascript_tag do %>
    var w = 600,
        h = 500,
        node,
        link,
        root;

    var force = d3.layout.force()
        .on("tick", tick)
        .charge(function(d) { return d._children ? -d.size / 100 : -30; })
        .linkDistance(function(d) { return d.target._children ? 80 : 30; })
        .size([w, h - 160]);

    var vis = d3.select("#network").append("svg:svg")
        .attr("width", w)
        .attr("height", h);

    d3.json("<%= asset_path "network.json" %>", function(json) {
        root = json;
        root.fixed = true;
        root.x = w / 2;
        root.y = h / 2 - 80;
        update();
    });

    function update() {
        var nodes = flatten(root),
        links = d3.layout.tree().links(nodes);

        // Restart the force layout.
        force
            .nodes(nodes)
            .links(links)
            .start();

        // Update the links…
        link = vis.selectAll("line.link")
            .data(links, function(d) { return d.target.id; });

        // Enter any new links.
        link.enter().insert("svg:line", ".node")
                .attr("class", "link")
                .attr("x1", function(d) { return d.source.x; })
                .attr("y1", function(d) { return d.source.y; })
                .attr("x2", function(d) { return d.target.x; })
                .attr("y2", function(d) { return d.target.y; });

        // Exit any old links.
        link.exit().remove();

        // Update the nodes…
        node = vis.selectAll("label.node")
                .data(nodes, function(d) { return d.id; })
                .style("fill", color);
        node = vis.selectAll("circle.node")
                .data(nodes, function(d) { return d.id; })
                .style("fill", color);

        node.transition()
            .attr("r", function(d) {
                return d.children ? 4.5 : Math.sqrt(d.size) / 10;
            });

        // Enter any new nodes.
        node.enter()
            .append("svg:circle")
                .attr("class", "node")
                .attr("cx", function(d) { return d.x; })
                .attr("cy", function(d) { return d.y; })
                .attr("r", function(d) {
                    return d.children ? 5 : Math.sqrt(d.size) / 10;
                })
                .style("fill", color)
                .on("click", click)
                .call(force.drag)
        ;
        node.enter()
            .append("svg:text")
                .attr("class", "label")
                .attr("x", function(d) { return d.x; })
                .attr("y", function(d) { return d.y; })
                .attr("fill", "black")
                .attr("font-family", "sans-serif")
                .attr("font-size", "10px")
                .text(text)
        ;

        // Exit any old nodes.
        node.exit().remove();
    }

    function tick() {
        link.attr("x1", function(d) { return d.source.x; })
                .attr("y1", function(d) { return d.source.y; })
                .attr("x2", function(d) { return d.target.x; })
                .attr("y2", function(d) { return d.target.y; });

        node.attr("cx", function(d) { return d.x; })
                .attr("cy", function(d) { return d.y; });
    }

    // Color leaf nodes blue, and packages white or blue.
    function color(d) {
        return d._children ? "#3182bd" : d.children ? "#c6dbef" : "#00aced";
    }

    // Give node name (username)
    function text(d) {
        return d.name;
    }

    // Toggle children on click.
    function click(d) {
        if (d.children) {
            d._children = d.children;
            d.children = null;
        } else {
            d.children = d._children;
            d._children = null;
        }
        update();
    }

    // Returns a list of all nodes under the root.
    function flatten(root) {
        var nodes = [], i = 0;

        function recurse(node) {
            if (node.children) node.size = node.children.reduce(function(p, v) { return p + recurse(v); }, 0);
            if (!node.id) node.id = ++i;
            nodes.push(node);
            return node.size;
        }

        root.size = recurse(root);
        return nodes;
    }
<% end %>
</div>


<table class="rankings" border="1" align="center">
    <tr>
        <th><strong>User ID</strong></th>
        <th><strong>Username</strong></th>
        <th><strong>Created At</strong></th>
        <th><strong>Follower Count</strong></th>
        <th><strong>Friend Count</strong></th>
        <th><strong>Favourite Count</strong></th>
        <th><strong>Score</strong></th>
    </tr>
    <% @users.each do |user| %>
        <tr>
            <td><%= user.userid %></td>
            <td><%= user.username %></td>
            <td><%= user.created %></td>
            <td><%= user.follower_count %></td>
            <td><%= user.friend_count %></td>
            <td><%= user.favourite_count %></td>
            <td><%= user.score %></td>
        </tr>
    <% end %>
</table>
